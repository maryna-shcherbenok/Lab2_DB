// <auto-generated />
using System;
using Lab2_DB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab2_DB.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250518162859_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab2_DB.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("EmailAuthor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameAuthor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumberAuthor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Lab2_DB.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("AuthorBook")
                        .HasColumnType("bigint");

                    b.Property<string>("AvailabilityStatusBook")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("FundBook")
                        .HasColumnType("bigint");

                    b.Property<string>("GenreBook")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint")
                        .HasColumnName("ISBN");

                    b.Property<int>("NumberPages")
                        .HasColumnType("int");

                    b.Property<int>("PublisherBook")
                        .HasColumnType("int");

                    b.Property<string>("TitleBook")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorBook" }, "IX_Books_AuthorBook");

                    b.HasIndex(new[] { "FundBook" }, "IX_Books_FundBook");

                    b.HasIndex(new[] { "PublisherBook" }, "IX_Books_PublisherBook");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Lab2_DB.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("LeaderDepartment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Library")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleDepartment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Library" }, "IX_Departments_Library");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Lab2_DB.Models.Fund", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("DepartmentFund")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleFund")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalNumberCopies")
                        .HasColumnType("int");

                    b.Property<string>("TypeFund")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentFund" }, "IX_Funds_DepartmentFund");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("Lab2_DB.Models.IssuedBook", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("BookID");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("RequestID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BookId" }, "IX_IssuedBooks_BookID");

                    b.HasIndex(new[] { "RequestId" }, "IX_IssuedBooks_RequestID");

                    b.ToTable("IssuedBooks");
                });

            modelBuilder.Entity("Lab2_DB.Models.Librarian", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("EmailLibrarian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameLibrarian")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumberLibrarian")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Librarians");
                });

            modelBuilder.Entity("Lab2_DB.Models.Library", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("EmailLibrary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LeaderLibrary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LibraryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumberLibrary")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TitleLibrary")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Lab2_DB.Models.PublishingHouse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AddressPh")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("AddressPH");

                    b.Property<string>("EmailPh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EmailPH");

                    b.Property<string>("PhoneNumberPh")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PhoneNumberPH");

                    b.Property<string>("TitlePh")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TitlePH");

                    b.HasKey("Id");

                    b.ToTable("PublishingHouses");
                });

            modelBuilder.Entity("Lab2_DB.Models.Reader", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("EmailReader")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameReader")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumberReader")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceStudyOrWorkReader")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoleReader")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Lab2_DB.Models.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("CardNumberReader")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("CreationDateRequest")
                        .HasColumnType("date");

                    b.Property<long>("Isbn")
                        .HasColumnType("bigint")
                        .HasColumnName("ISBN");

                    b.Property<long>("PassNumberLibrarian")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CardNumberReader" }, "IX_Requests_CardNumberReader");

                    b.HasIndex(new[] { "PassNumberLibrarian" }, "IX_Requests_PassNumberLibrarian");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Lab2_DB.Models.Book", b =>
                {
                    b.HasOne("Lab2_DB.Models.Author", "AuthorBookNavigation")
                        .WithMany("Books")
                        .HasForeignKey("AuthorBook")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Authors");

                    b.HasOne("Lab2_DB.Models.Fund", "FundBookNavigation")
                        .WithMany("Books")
                        .HasForeignKey("FundBook")
                        .IsRequired()
                        .HasConstraintName("FK_Books_Funds");

                    b.HasOne("Lab2_DB.Models.PublishingHouse", "PublisherBookNavigation")
                        .WithMany("Books")
                        .HasForeignKey("PublisherBook")
                        .IsRequired()
                        .HasConstraintName("FK_Books_PublishingHouses");

                    b.Navigation("AuthorBookNavigation");

                    b.Navigation("FundBookNavigation");

                    b.Navigation("PublisherBookNavigation");
                });

            modelBuilder.Entity("Lab2_DB.Models.Department", b =>
                {
                    b.HasOne("Lab2_DB.Models.Library", "LibraryNavigation")
                        .WithMany("Departments")
                        .HasForeignKey("Library")
                        .IsRequired()
                        .HasConstraintName("FK_Departments_Libraries");

                    b.Navigation("LibraryNavigation");
                });

            modelBuilder.Entity("Lab2_DB.Models.Fund", b =>
                {
                    b.HasOne("Lab2_DB.Models.Department", "DepartmentFundNavigation")
                        .WithMany("Funds")
                        .HasForeignKey("DepartmentFund")
                        .IsRequired()
                        .HasConstraintName("FK_Funds_Departments");

                    b.Navigation("DepartmentFundNavigation");
                });

            modelBuilder.Entity("Lab2_DB.Models.IssuedBook", b =>
                {
                    b.HasOne("Lab2_DB.Models.Book", "Book")
                        .WithMany("IssuedBooks")
                        .HasForeignKey("BookId")
                        .IsRequired()
                        .HasConstraintName("FK_IssuedBooks_Books1");

                    b.HasOne("Lab2_DB.Models.Request", "Request")
                        .WithMany("IssuedBooks")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK_IssuedBooks_Requests");

                    b.Navigation("Book");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Lab2_DB.Models.Request", b =>
                {
                    b.HasOne("Lab2_DB.Models.Reader", "CardNumberReaderNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("CardNumberReader")
                        .IsRequired()
                        .HasConstraintName("FK_Requests_Readers");

                    b.HasOne("Lab2_DB.Models.Librarian", "PassNumberLibrarianNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("PassNumberLibrarian")
                        .IsRequired()
                        .HasConstraintName("FK_Requests_Librarians");

                    b.Navigation("CardNumberReaderNavigation");

                    b.Navigation("PassNumberLibrarianNavigation");
                });

            modelBuilder.Entity("Lab2_DB.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Lab2_DB.Models.Book", b =>
                {
                    b.Navigation("IssuedBooks");
                });

            modelBuilder.Entity("Lab2_DB.Models.Department", b =>
                {
                    b.Navigation("Funds");
                });

            modelBuilder.Entity("Lab2_DB.Models.Fund", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Lab2_DB.Models.Librarian", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Lab2_DB.Models.Library", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Lab2_DB.Models.PublishingHouse", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Lab2_DB.Models.Reader", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Lab2_DB.Models.Request", b =>
                {
                    b.Navigation("IssuedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
